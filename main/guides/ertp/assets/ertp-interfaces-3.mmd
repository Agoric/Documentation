---
title: "ERTP: Fungible and Non-Fungible Assets"
---
classDiagram
   class IssuerKit~Kind~
   IssuerKit "1" *-- "1" Mint~Kind~
   IssuerKit "1" *-- "1" Issuer~Kind~
   IssuerKit "1" *-- "1" Brand~Kind~

  class ertp["@agoric/ertp"] {
   makeIssuerKit() IssuerKit
   AmountMath
   AssetKind
  }
  ertp *-- AmountMath : import
  ertp *-- AssetKind : import
  class AmountMath {
    make(brand: Brand~K~, value~K~) Amount~K~
  }
  ertp --> IssuerKit~K~ : makeIssuerKit
  AmountMath --> Amount~K~ : make

   class Mint~Kind~ {
     getIssuer()
     mintPayment(amount: Amount~Kind~)
   }
Mint --> Issuer: getIssuer
Mint --> Payment~Kind~ : mintPayment
   class Issuer~Kind~ {
    getBrand()
makeEmptyPurse()
getAmountOf(payment: Payment)
   }
   Issuer --> Brand: getBrand
   Issuer --> Purse~Kind~: makeEmptyPurse()
   Issuer "1" *-- "many" Payment
   Payment
   class Brand~Kind~
   class Payment~Kind~
   class Amount~Kind~ {
     brand: Brand~Kind~
     value: Value~Kind~
    }
    class Purse~Kind~ {
        +getCurrentAmount()
        +deposit(payment: Payment~Kind~, expectedAmount?: Amount~Kind~)
        +withdraw(amount: Amount~Kind~)
    }
    Purse --> Payment : withdraw

    class AssetKind {
     NAT // fungible
     COPY_BAG // non-fungible
     ...
    }
<<Enumeration>> AssetKind
```
