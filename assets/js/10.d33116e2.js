(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{378:function(t,e,a){t.exports=a.p+"assets/img/Agoric-Registration.77971813.png"},379:function(t,e,a){t.exports=a.p+"assets/img/REPL-1.fa02da7a.png"},380:function(t,e,a){t.exports=a.p+"assets/img/REPL-2.1e179f60.png"},446:function(t,e,a){"use strict";a.r(e);var s=a(44),o=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"starting-multiuser-dapps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#starting-multiuser-dapps"}},[t._v("#")]),t._v(" Starting Multiuser Dapps")]),t._v(" "),s("p",[t._v("When developing a Dapp, you may need to test how it behaves with multiple users before deploying it publicly.\nThese users could have different roles, such as the contract deployer, an auctioneer, a bidder, a buyer, a seller, etc.\nThe Agoric CLI implements a local-chain-multiuser scenario for developing and testing multiuser Dapps.")]),t._v(" "),s("h2",{attrs:{id:"usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),s("p",[t._v("Develop your Dapp as described in the "),s("RouterLink",{attrs:{to:"/getting-started/"}},[t._v("Agoric Getting Started Guide")]),t._v(".\nAfter using "),s("code",[t._v("agoric start")]),t._v(" to test with the simulated chain, stop the simulated\nchain with Control-C.")],1),t._v(" "),s("p",[t._v("You must first compile the Golang dependencies in the Agoric SDK by running")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" agoric-sdk/packages/cosmic-swingset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v("\n")])])]),s("p",[t._v("Check that the "),s("code",[t._v("ag-cosmos-helper")]),t._v(" binary is in your "),s("code",[t._v("$PATH")]),t._v(" and works by running the following. If not, you\nneed to add it to your "),s("code",[t._v("$PATH")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Display the directory that should be in your $PATH.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${GOBIN-${GOPATH-$HOME"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("go}")]),t._v("/bin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Attempt to run a binary that was installed there.")]),t._v("\nag-cosmos-helper version --long\n")])])]),s("p",[t._v("Then start a real local chain by running the following command. If you want to\nstart the Agoric process afresh, add the "),s("code",[t._v("--reset")]),t._v(" option at the end.")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("agoric start local-chain\n")])])]),s("p",[t._v("There won’t be any running clients yet, but the chain will start and be fully functional.")]),t._v(" "),s("p",[t._v("If you’re satisfied with the restart and want to run the chain in the background, you must know how to manage background\nprocesses on your system.  For example, Unix-like systems can use the following to log to "),s("code",[t._v("chain.log")]),t._v(" and start in the background:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("agoric start local-chain "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">&")]),t._v(" chain.log "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n")])])]),s("p",[t._v("To start a local solo machine connected to the above local chain (your API ag-solo), run the following.\nNote this should either give an error or take a long time (i.e. over a minute) during which your\nlocal chain should be logging something like "),s("code",[t._v("validTxs=1")]),t._v(". There are over 50 round trips (at 2 seconds apiece)\nbefore the local ag-solo is ready to use.")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("agoric start local-solo "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8000")]),t._v("\n")])])]),s("p",[t._v("This starts a solo machine listening for HTTP on TCP port 8000.")]),t._v(" "),s("p",[t._v("To start other local ag-solos, use a unique port number for each one, such as 8001 or 8002 with:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("agoric start local-solo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("PORT-NUMBER"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("For each new local ag-solo, you need to either:")]),t._v(" "),s("ul",[s("li",[t._v("Open the wallet corresponding to each local-solo port number by running:\n"),s("ul",[s("li",[s("code",[t._v("agoric open --hostport=localhost:<local-solo-portnumber>")])])])]),t._v(" "),s("li",[t._v("Or open the wallet, get its URL displayed, and then copy/paste the URL into the browser you want to\nview the wallet in:\n"),s("ul",[s("li",[s("code",[t._v("agoric open --no-browser --hostport=localhost:<local-solo-portnumber>")])])])])]),t._v(" "),s("p",[t._v("Test that each of your ag-solos is running and has a wallet by connecting to "),s("code",[t._v("http://localhost:<PORT-NUMBER>/")]),t._v(" for each port you used.")]),t._v(" "),s("p",[t._v("Run your contract and API deployment scripts against the API ag-solo with this "),s("code",[t._v("agoric deploy")]),t._v(" command. Note that port 8000 is the default\nfor "),s("code",[t._v("agoric deploy")]),t._v(" operations. To deploy to an ag-solo running on a different port, use "),s("code",[t._v("agoric deploy --hostport=127.0.0.1:<PORT-NUMBER>")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("agoric deploy "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")]),t._v("-TO-DEPLOY.JS"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("To use your Dapp UI with different clients, you’ll need to connect to https://local.agoric.com in different browsers (or\ndifferent profiles of the same browser).  Then fill out the localhost address of the ag-solo that you want to use with\nthat browser. This connects the processes in the browsers to their own wallets so they do not share per-client data\nsuch as cookies, storage, etc. Test your UI in each browser!")]),t._v(" "),s("h2",{attrs:{id:"example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),s("p",[t._v("This section shows how you do the above steps.")]),t._v(" "),s("p",[t._v("Start the local chain and ag-solos")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Build the Golang dependencies.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cd agoric-sdk/packages/cosmic-swingset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Check that ag-cosmos-helper binary is in your $PATH and working")]),t._v("\nag-cosmos-helper version --long\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Initialize a Dapp directory.")]),t._v("\nagoric init foo\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Change to the Dapp directory.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" foo\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Install NPM dependencies.")]),t._v("\nagoric "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start the local chain, logging to chain.log.")]),t._v("\nagoric start local-chain "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">&")]),t._v(" chain.log "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a local API ag-solo (takes over a minute to finish)")]),t._v("\nagoric start local-solo "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8000")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">&")]),t._v(" solo-8000.log "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Open the associated wallet")]),t._v("\nagoric "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),t._v(" --hostport"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("localhost:8000\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start a second ag-solo.")]),t._v("\nagoric start local-solo "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8001")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">&")]),t._v(" solo-8001.log "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Open the second associated wallet")]),t._v("\nagoric "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),t._v(" --hostport"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("localhost:8001\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Repeat for any other ag-solos you wish to start (8002, 8003, etc)")]),t._v("\n")])])]),s("p",[t._v("Configure the first client browser")]),t._v(" "),s("p",[t._v("Open a browser (or a new profile), and navigate to https://local.agoric.com/")]),t._v(" "),s("p",[s("img",{attrs:{src:a(378),alt:"Agoric Registration"}})]),t._v(" "),s("p",[t._v("Keep the recommended address ("),s("code",[t._v("http://localhost:8000")]),t._v("), click "),s("strong",[t._v("Open")]),t._v(", and verify that it opens a wallet and\nREPL (Read-Eval-Print-Loop).")]),t._v(" "),s("p",[t._v("In the REPL, type "),s("code",[t._v("console.log(8000)")]),t._v(", hit "),s("strong",[t._v("Enter")]),t._v(", and see the\ncommand and output in the REPL history.")]),t._v(" "),s("p",[s("img",{attrs:{src:a(379),alt:"REPL"}})]),t._v(" "),s("h3",{attrs:{id:"configure-an-additional-client-browser"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configure-an-additional-client-browser"}},[t._v("#")]),t._v(" Configure an additional client browser")]),t._v(" "),s("p",[t._v("Open a different browser. Not just another tab or window, but a completely different browser or browser profile\nthat doesn’t share cookies with any other ag-solo’s browser. For example, if you had an open Chrome window,\ncreate a new Chrome profile, or open a Firefox or Safari window.")]),t._v(" "),s("p",[t._v("Navigate to "),s("code",[t._v("https://local.agoric.com/")]),t._v(" and,\nin the resulting page, set the address to "),s("code",[t._v("http://localhost:8001")])]),t._v(" "),s("p",[t._v("Click "),s("strong",[t._v("Save")]),t._v(". Then click "),s("strong",[t._v("Open")]),t._v(" and\nverify that it opens a wallet page (but note that you won't have access yet).")]),t._v(" "),s("p",[t._v("Type "),s("code",[t._v("console.log(8001)")]),t._v("\nin the REPL, hit "),s("strong",[t._v("Enter")]),t._v(", and see the "),s("code",[t._v("console.log")]),t._v(" command and output in the REPL's history.")]),t._v(" "),s("p",[s("img",{attrs:{src:a(380),alt:"REPL"}})]),t._v(" "),s("p",[t._v("You can repeat this section for as many other ports as you ran ag-solos for.")]),t._v(" "),s("h3",{attrs:{id:"test-the-ui"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test-the-ui"}},[t._v("#")]),t._v(" Test the UI")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Deploy the contract and API service.")]),t._v("\nagoric deploy contract/deploy.js api/deploy.js\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start the UI")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cd ui "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Then navigate to "),s("code",[t._v("http://localhost:3000")]),t._v(" in each browser/profile for which you want to use the UI."),s("br"),t._v("\nWhen the UI opens your wallet, the browser should navigate to the same URL you entered in that browser\nor profile’s "),s("code",[t._v("https://local.agoric.com")]),t._v(" page.")])])}),[],!1,null,null,null);e.default=o.exports}}]);