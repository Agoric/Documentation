(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{452:function(t,e,s){"use strict";s.r(e);var a=s(44),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"notifiers-and-subscriptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#notifiers-and-subscriptions"}},[t._v("#")]),t._v(" Notifiers and Subscriptions")]),t._v(" "),s("p",[s("em",[t._v("Notifiers")]),t._v(" and "),s("em",[t._v("Subscriptions")]),t._v(" both let a service notify clients of state changes.\nSpecifically, both are abstractions for producing and consuming asynchronous\nvalue sequences. They rely on promises to deliver a stream of messages allowing\nmany clients to receive notifications without the originator having to track a subscription list.\nAn object wanting to publish updates to interested clients makes a notifier or a\nsubscription available to them.")]),t._v(" "),s("p",[t._v("In JavaScript, async iterations are manipulated by "),s("code",[t._v("AsyncGenerators")]),t._v(", "),s("code",[t._v("AsyncIterables")]),t._v(", and "),s("code",[t._v("AsyncIterators")]),t._v(". For an introduction to them, see "),s("a",{attrs:{href:"https://javascript.info/async-iterators-generators",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"distributed-asynchronous-iteration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#distributed-asynchronous-iteration"}},[t._v("#")]),t._v(" Distributed Asynchronous Iteration")]),t._v(" "),s("p",[t._v("An "),s("em",[t._v("async iteration")]),t._v(" is an abstract sequence of values. It consists of zero or\nmore "),s("em",[t._v("non-final values")]),t._v(" in a fully ordered sequence, revealed asynchronously\nover time. In other words, the values have a full ordering, and all consumers\nsee the whole sequence, or a subset of it, in the same order.")]),t._v(" "),s("p",[t._v("The sequence may continue indefinitely or terminate in one of two ways:")]),t._v(" "),s("ul",[s("li",[s("em",[t._v("Finish")]),t._v(": The async iteration successfully completes and reports any JavaScript\nvalue as a final completion.")]),t._v(" "),s("li",[s("em",[t._v("Fail")]),t._v(": The async iteration fails and gives a reported final reason. This should be an\nerror object, but can be any JavaScript value.")])]),t._v(" "),s("p",[s("code",[t._v("Finish")]),t._v(" and "),s("code",[t._v("Fail")]),t._v(' are final values. To avoid confusion, for iteration values in\nthis doc, "final" and "non-final" just refer to position in an iteration, and not\n"final" in the sense of the Java keyword or similar.')]),t._v(" "),s("h2",{attrs:{id:"notifierkit-and-subscriptionkit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#notifierkit-and-subscriptionkit"}},[t._v("#")]),t._v(" "),s("code",[t._v("NotifierKit")]),t._v(" and SubscriptionKit")]),t._v(" "),s("p",[s("code",[t._v("makeNotifierKit()")]),t._v(" makes an"),s("code",[t._v("{updater, notifier}")]),t._v(" pair, while "),s("code",[t._v("makeSubscriptionKit()")]),t._v("\nmakes a similar"),s("code",[t._v("{publication, subscription}")]),t._v(" pair. Each pair’s first\nelement ("),s("code",[t._v("updater")]),t._v(" or "),s("code",[t._v("publication")]),t._v(") produces the async iteration which is then\nconsumed using each pair’s second element ("),s("code",[t._v("notifier")]),t._v(" or "),s("code",[t._v("subscription")]),t._v(").")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" makeNotifierKit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@agoric/notifier'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" makeSubscriberKit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@agoric/notifier'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" updater"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" notifier "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeNotifierKit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" publication"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" subscription "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeSubscriptionKit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),s("p",[t._v("The key difference between the two is")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("notifiers")]),t._v(" are lossy.\n"),s("ul",[s("li",[t._v("While the sequence is ordered, the consumer requests only the current value and\nso may never see any values that happened between requests.")])])]),t._v(" "),s("li",[s("code",[t._v("subscriptions")]),t._v(" are lossless.\n"),s("ul",[s("li",[t._v("The consumer will see every value in the sequence.")])])])]),t._v(" "),s("p",[t._v("If your consumers only care about more recent states, use a "),s("code",[t._v("NotifierKit")]),t._v(".  For\nconsumers that need to see all the values, use a "),s("code",[t._v("SubscriptionKit")]),t._v(". Subscriptions\nare often appropriate when the iteration represents a changing quantity, like a purse\nbalance, and its consumer is updating a UI that doesn't care about any older and stale\nnon-final values.")]),t._v(" "),s("p",[t._v("Notifiers are appropriate when a quantity changes quickly. They only communicate\nnon-final values at the rate they're consumed, bounded by the network round-trip\ntime.  All other non-final values are never communicated. The "),s("code",[t._v("NotifierKit")]),t._v("'s\nlossy nature enables this optimization.`")]),t._v(" "),s("p",[s("code",[t._v("notifier")]),t._v(" and "),s("code",[t._v("subscription")]),t._v(" both implement the JavaScript "),s("code",[t._v("AsyncIterable")]),t._v(" API to consume the iteration. "),s("code",[t._v("updater")]),t._v(" and "),s("code",[t._v("publication")]),t._v(" implement the "),s("code",[t._v("IterationObserver")]),t._v(" API, as defined by Agoric (JavaScript has no standard for producing iterations). For both pairs, "),s("code",[t._v("IterationObserver")]),t._v(" only produces the iteration. "),s("code",[t._v("AsyncIterable")]),t._v(" consumes the iteration.")]),t._v(" "),s("p",[t._v("An iteration subset may be a valid iteration. "),s("code",[t._v("NotifierKit")]),t._v(" and "),s("code",[t._v("SubscriptionKit")]),t._v(" are each organized around a different way of subsetting one iteration into another.")]),t._v(" "),s("h3",{attrs:{id:"notifierkit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#notifierkit"}},[t._v("#")]),t._v(" NotifierKit")]),t._v(" "),s("p",[t._v("A "),s("code",[t._v("NotifierKit")]),t._v(" producer produces iteration values with the updater using the\n"),s("code",[t._v("IterationObserver")]),t._v(" API. Its consumers consume iteration values via the notifier\nusing the "),s("code",[t._v("AsyncIterable")]),t._v(" API. Each "),s("code",[t._v("NotifierKit")]),t._v(" consumer iteration is a lossy sampling subset of the iteration produced by that "),s("code",[t._v("NotifierKit")]),t._v(" producer. Different consumers may see different sampling subsets.")]),t._v(" "),s("p",[t._v("An iteration’s sampling subset:")]),t._v(" "),s("ul",[s("li",[t._v("May omit some of the iteration’s non-final values.")]),t._v(" "),s("li",[t._v("All sampling subset non-final values are:\n"),s("ul",[s("li",[t._v('In the original’s non-final values (i.e. if "7" is in the subset, "7" is in\nthe original).')]),t._v(" "),s("li",[t._v("In the same order (i.e. if the original is order 1, 3, 8, 5, 9, the subset\nis in the same order, even if missing some items; 1, 8, 5 for example,\nbut not 8, 1, 5).")])])]),t._v(" "),s("li",[t._v("The original and the subset both have the same termination value.")])]),t._v(" "),s("p",[t._v("When a new iteration value is available, either it or a later value becomes\navailable on each sampling subset promptly. In other words, if value 'a' is\nintroduced on the producer end followed a few moments later by 'b', then all\nclients either promptly see 'a', or won't see it but will promptly see a\nsuccessor, such as 'b'. If a value is added and nothing else follows for a\nwhile, then that value must be distributed promptly to the consumers.")]),t._v(" "),s("h3",{attrs:{id:"subscriptionkit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#subscriptionkit"}},[t._v("#")]),t._v(" SubscriptionKit")]),t._v(" "),s("p",[t._v("Use the "),s("code",[t._v("SubscriptionKit")]),t._v(" for pub-sub operations, where subscribers should see\neach published value starting when the subscribe. The producer can be described\nas the publisher and publishes iteration values with the publication using the\n"),s("code",[t._v("IterationObserver")]),t._v(" API. Subscribers consume the published iteration values with\nthe subscription using the "),s("code",[t._v("AsyncIterable")]),t._v(" API. Since each published value is sent\nto all subscribers, "),s("code",[t._v("SubscriptionKit")]),t._v(" generally should not be used with rapidly\nproduced values.")]),t._v(" "),s("p",[t._v("An iteration’s suffix subset is defined by its starting point in the original\niteration, which can be a non-final value or a termination.\nThe suffix subset has exactly the original iteration’s members from its starting\npoint to and including its termination. For example, if the original is\n{ 2 5 9 13 Fail } with Fail as the termination and a starting point at 9, the\nsubset is { 9 13 Fail }.")]),t._v(" "),s("p",[t._v("When a new value becomes available on the original iteration, it promptly becomes\navailable on every suffix subset whose starting point is at or before that value\nSo if the original is { 2 5 9 13 Fail } and 9 becomes available, 9 promptly\nbecomes available to any suffix subset with a starting point of 2, 5, or 9. It\ndoes not become available to any subset starting at 13 or Fail).")]),t._v(" "),s("p",[t._v("Each subscription is an "),s("code",[t._v("AsyncIterable")]),t._v(" that produces any number of\n"),s("code",[t._v("AsyncIterators")]),t._v(". These "),s("code",[t._v("AsyncIterators")]),t._v(" are "),s("code",[t._v("SubsciptionIterators")]),t._v(" which also\nhave a "),s("code",[t._v("subscribe()")]),t._v(" method. Calling a "),s("code",[t._v("subscribe()")]),t._v(" method makes a\n"),s("code",[t._v("Subscription")]),t._v(" whose starting point is that "),s("code",[t._v("SubscriptionIterator")]),t._v("'s current\nposition.")]),t._v(" "),s("h2",{attrs:{id:"methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("updater")]),t._v(" and "),s("code",[t._v("publication")]),t._v(" both have the same three methods:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("updateState(state)")]),t._v("\nSupplies and sends out a new state to consumers. All active Promises\nproduced by "),s("code",[t._v("getUpdateSince()")]),t._v(" are resolved to the next record.")]),t._v(" "),s("li",[s("code",[t._v("finish(finalState)")]),t._v(" "),s("ul",[s("li",[t._v("Closes the stream of state changes and supplies a final state\nvalue to consumers.")])])]),t._v(" "),s("li",[s("code",[t._v("fail(reason)")]),t._v(" "),s("ul",[s("li",[t._v("Closes the stream of state changes, indicates a failure to finish\nsatisfactorily, and supplies a reason for the failure to consumers. Does not provide\na next state. Instead, it causes the Promise to be rejected with the reason,\nsignalling that the monitored object hit an error condition.")])])])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("subscription")]),t._v(" and "),s("code",[t._v("publication")]),t._v(" both have this method:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("getUpdateSince()")]),t._v(": Returns "),s("code",[t._v("{ value, updateCount }")]),t._v(".\n"),s("ul",[s("li",[s("p",[t._v("Returns the next published value after the previously obtained value.\n"),s("code",[t._v("value")]),t._v(" represents the state, and the format is up to the publisher.\n"),s("code",[t._v("updateCount")]),t._v(" requests notification the next time there's a state change.\nIf the state becomes final (e.g. a seat exits), "),s("code",[t._v("updateCount")]),t._v(" will be\nundefined. If there's an error, the promise for the record is\nrejected and there isn't a next state.")]),t._v(" "),s("p",[t._v("If you call "),s("code",[t._v("getUpdateSince(oldUpdateCount)")]),t._v(" with no count, or any\n"),s("code",[t._v("updateCount")]),t._v(" other than the most recent one, the notifier immediately\nreturns a promise for a record with the current state. If you call with\nthe most-recently generated "),s("code",[t._v("updateCount")]),t._v(", the notifier returns a promise\nfor the next record, which is resolved on the next state change. If you\nhaven't called "),s("code",[t._v("getUpdateSince()")]),t._v(" before, you won't have a\nprevious "),s("code",[t._v("updateCount")]),t._v(" to use.")])])])])]),t._v(" "),s("h2",{attrs:{id:"notifiers-and-subscriptions-in-zoe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#notifiers-and-subscriptions-in-zoe"}},[t._v("#")]),t._v(" Notifiers and Subscriptions in Zoe")]),t._v(" "),s("p",[t._v("Zoe provides updates on the state of seats within a contract. The updates\nfrom Zoe indicate changes to the allocation of a seat and seats exiting.\nThese are available from "),s("code",[t._v("E(userSeat).getNotifier()")]),t._v(" and "),s("code",[t._v("zcfSeat.getNotifier()")]),t._v(",\nwhich provide long-lived notifier objects associated with a particular\nseat. "),s("code",[t._v("zcfSeats")]),t._v(" are available within contracts while "),s("code",[t._v("userSeats")]),t._v(" are accessible\nfrom the REPL, deploy scripts, and other code outside contracts. There are no\nequivalent "),s("code",[t._v("getSubscription()")]),t._v(" or "),s("code",[t._v("getUpdater()")]),t._v(" methods on the\nseats.")]),t._v(" "),s("p",[t._v("Zoe's updates for an offer show the current allocation that will be paid if the contract completes without further changes.")]),t._v(" "),s("p",[t._v("Individual contracts can use notifiers and subscriptions to provide updates giving current prices or other contract-specific details.")]),t._v(" "),s("p",[t._v("The following methods use or return notifiers. Click on the name to go to their\nfull documentation:")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/zoe/api/zoe-contract-facet.html#zcfseat-object"}},[s("code",[t._v("ZCFSeat.getNotifier()")])]),t._v(" "),s("ul",[s("li",[t._v("Part of the Zoe Contract Facet API, returns a notifier associated with the seat's allocation. It  provides updates on changing\nallocations for this seat, and tells when the seat has been exited.")])])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/zoe/api/zoe.html#userseat-object"}},[s("code",[t._v("UserSeat.getNotifier")])]),t._v(" "),s("ul",[s("li",[t._v("Part of the Zoe API, returns a notifier associated with the seat. Its updates can be anything the contract wants to publish, such as\nprice changes, new currency pools, etc.")])])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/ertp/api/purse.html#purse-getcurrentamountnotifier"}},[s("code",[t._v("purse.getCurrentAmountNotifier()")])]),t._v(" "),s("ul",[s("li",[t._v("Part of the ERTP API, returns a lossy notifier for changes to this purse's balance.")])])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/guides/wallet/api.html#getpursesnotifier"}},[s("code",[t._v("getPursesNotifier")])]),t._v(" "),s("ul",[s("li",[t._v("Part of the Wallet API, it returns a notifier that follows changes in the purses in the Wallet.")])])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/guides/wallet/api.html#getoffersnotifier"}},[s("code",[t._v("getOffersNotifier")])]),t._v(" "),s("ul",[s("li",[t._v("Part of the Wallet API, it returns a notifier that follows changes to the offers received by the Wallet.")])])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/repl/priceAuthority.html#makequotenotifier-amountin-brandout"}},[s("code",[t._v("makeQuoteNotifier(amountIn,brandOut)")])]),t._v(" "),s("ul",[s("li",[t._v("Part of the PriceAuthority API, notifies the latest "),s("code",[t._v("PriceQuotes")]),t._v(" for the given "),s("code",[t._v("amountIn")]),t._v(".")])])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/repl/priceAuthority.html#getpricenotifier-brandin-brandout"}},[s("code",[t._v("getPriceNotifier(brandIn, brandOut)")])]),t._v(" "),s("ul",[s("li",[t._v("Part of the PriceAuthority API, returns a notifier for the specified brands. Different PriceAuthories may issue these at very\ndifferent rates.")])])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/repl/timerServices.html"}},[s("code",[t._v("E(home.<chain or local>TimerService).createNotifier(delaySecs, interval)")])]),t._v(" "),s("ul",[s("li",[t._v("Part of the REPL's chain and local TimerServices, it creates and returns a "),s("code",[t._v("Notifier")]),t._v(" object. It repeatedly delivers updates at times\nthat are a multiple of the passed in interval value, with the first update happening the value of "),s("code",[t._v("delaySecs")]),t._v(" after the notifier is\ncreated.")])])],1)]),t._v(" "),s("h2",{attrs:{id:"examples"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),s("h3",{attrs:{id:"subscription-example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#subscription-example"}},[t._v("#")]),t._v(" Subscription example")]),t._v(" "),s("p",[t._v("Let’s look at a subscription example. We have three characters; Paula the publisher, and subscribers Alice and Bob. While Alice and Bob both consume Paula's published iteration, they use different tools to do so.")]),t._v(" "),s("p",[t._v("First we create a publication/subscription pair with "),s("code",[t._v("makeSubscriptionKit()")]),t._v(". Paula publishes an iteration with non-final sequence 'a', 'b' and 'done' as its completion value.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" publication"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" subscription "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeSubscriptionKit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Paula the publisher says")]),t._v("\npublication"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npublication"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npublication"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("finish")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'done'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Remember, "),s("code",[t._v("SubscriptionKit")]),t._v(" is lossless. It conveys all of an async iteration’s non-final values, as well as the final value.")]),t._v(" "),s("p",[t._v("You can use the JavaScript "),s("code",[t._v("AsyncIterable")]),t._v(" API directly, but either the JavaScript for-await-of syntax or the "),s("code",[t._v("observeIteration")]),t._v(" adaptor are more convenient. Here,\nAlice uses the former, and then Bob uses the latter.")]),t._v(" "),s("p",[t._v("Subscriber Alice consumes the iteration using the for-await-of loop. She can see\nthe non-final values and whether the iteration completes or fails. She can see a\nfailure reason, but the for-await-of syntax does not let her see the completion\nvalue 'done'. She can write code that only executes after the loop finishes, but\nthe code won’t know what the completion value actually was “done”, “completed”, or something else. This is a limitation of JavaScript's iteration, whether asynchronous or synchronous (as consumed by a for-of loop).")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("consume")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("subscription")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" val "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" subscription"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'non-final'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'the iteration finished'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reason"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'the iteration failed'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reason"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("consume")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subscription"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eventually prints")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// non-final-value a")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// non-final-value b")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the iteration finished")]),t._v("\n")])])]),s("p",[t._v("Subscriber Bob consumes using the "),s("code",[t._v("(observeIteration(asyncIterableP, iterationObserver)")]),t._v(" adaptor.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" observer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("harden")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("updateState")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("val")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'non-final'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("finish")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("completion")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'finished'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" completion"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fail")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("reason")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'failed'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reason"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("observeIteration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subscription"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" observer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eventually prints")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// non-final-value a")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// non-final-value b")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// finished done")]),t._v("\n")])])]),s("h3",{attrs:{id:"notifier-example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#notifier-example"}},[t._v("#")]),t._v(" Notifier example")]),t._v(" "),s("p",[s("code",[t._v("NotifierKit()")]),t._v(" is a lossy conveyor of non-final values, but does also\nlosslessly convey termination. Let's say the subscription example above\nstarted with the following instead of "),s("code",[t._v("makeSubscriberKit()")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" updater"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" notifier "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeNotifierKit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("If we then renamed "),s("code",[t._v("publication")]),t._v(" to "),s("code",[t._v("updater")]),t._v(" and "),s("code",[t._v("subscription")]),t._v(" to "),s("code",[t._v("notifier")]),t._v("\nin the rest of the example, the code would still be correct and work. However,\nwhen using a notifier, either Alice or Bob may have missed either or both of the\nnon-final values due to "),s("code",[t._v("NotifierKit()")]),t._v("'s lossy nature.")]),t._v(" "),s("h2",{attrs:{id:"distributed-operation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#distributed-operation"}},[t._v("#")]),t._v(" Distributed Operation")]),t._v(" "),s("p",[t._v("Either make "),s("code",[t._v("NotifierKit()")]),t._v(" or "),s("code",[t._v("makeSubscriberKit()")]),t._v(" can be used in a multicast\nmanner with good distributed systems properties, where there is only one\nproducing site but any number of consuming sites. The producer is not vulnerable\nto the consumers; they cannot cause the kit to malfunction or prevent the code\nproducing values from making progress. The consumers cannot cause each other to\nhang or miss values.")]),t._v(" "),s("p",[t._v("For distributed operation, all the iteration values---non-final values,\nsuccessful completion value, failure reason---must be "),s("code",[t._v("Passable")]),t._v("; values that\ncan somehow be passed between vats. The rest of this doc assumes all these\nvalues are Passable.")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("makeNotifierKit()")]),t._v(" or "),s("code",[t._v("makeSubscriptionKit()")]),t._v(" call makes the notifier/updater\nor publication/subscription pair on the producer's site. As a result, both the\n"),s("code",[t._v("iterationObserver")]),t._v(" and the initial "),s("code",[t._v("asyncIterable")]),t._v(" are on the producer's site. If\nProducer Paula sends Consumer Bob the "),s("code",[t._v("asyncIterable")]),t._v(", Bob receives a possibly\nremote reference to it. Producers and their Consumers can be remote from each\nother.")]),t._v(" "),s("p",[t._v("Bob's example code above is still correct if he uses this reference directly, since\n"),s("code",[t._v("observeIteration")]),t._v(" only needs its first argument to be a reference of some sort to\nan "),s("code",[t._v("AsyncIterable")]),t._v(" conveying "),s("code",[t._v("Passable")]),t._v(" values. This reference may be a local\n"),s("code",[t._v("AsyncIterable")]),t._v(", a remote presence of an "),s("code",[t._v("AsyncIterable")]),t._v(", or a local or remote\npromise for an "),s("code",[t._v("AsyncIterable")]),t._v(". "),s("code",[t._v("observeIteration")]),t._v(" only sends it eventual messages\nusing "),s("code",[t._v("E()")]),t._v("  and so doesn't care about these differences.")]),t._v(" "),s("p",[t._v("However, Bob’s code is sub-optimal. Its distributed systems properties are\nnot terrible, but Bob does better using "),s("code",[t._v("getSharableSubscriptionInternals()")]),t._v("\n(provided by "),s("code",[t._v("SubscriptionKit")]),t._v("). This lets Bob make a local "),s("code",[t._v("AsyncIterable")]),t._v(" that\ncoordinates better with producer Paula's "),s("code",[t._v("IterationObserver")]),t._v(".")]),t._v(" "),s("p",[t._v("Subscriber Alice's above code is less forgiving. She's using JavaScript's\nfor-await-of loop which requires a local "),s("code",[t._v("AsyncIterable")]),t._v(". It cannot handle a\nremote reference to an "),s("code",[t._v("AsyncIterable")]),t._v(" at Paula's site. Alice has to make an\n"),s("code",[t._v("AsyncIterable")]),t._v(" at her site by using "),s("code",[t._v("getSharableSubsciptionInternals()")]),t._v(". She can\nreplace her call to "),s("code",[t._v("consume(subscription)")]),t._v(" with:")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" makeSubscription "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@agoric/notifier'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" localSubscription "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeSubscription")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subscription"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSharableSubsciptionInternals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("consume")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("localSubscription"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("The above used a SubscriptionKit. NotifierKits have a similar pair of a\n"),s("code",[t._v("getSharableNotifierInternals()")]),t._v(" method and a "),s("code",[t._v("makeNotifier")]),t._v(". However, this\ntechnique requires Alice know what kind of possibly-remote "),s("code",[t._v("AsyncIterable")]),t._v("\nshe has, and to have the required making function code locally available.")]),t._v(" "),s("p",[t._v("Alternatively, Alice can generically mirror any possibly remote "),s("code",[t._v("AsyncIterable")]),t._v(" by\nmaking a new local pair and plugging them together with "),s("code",[t._v("observeIteration")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  publication"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" adapterPublication"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  subscription"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" adapterSubscription\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeSubscriptionKit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("observeIteration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subscription"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" adapterPublication"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("consume")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("adapterSubscription"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("This works when subscription is a reference to any "),s("code",[t._v("AsyncIterable")]),t._v(". If Alice only\nneeds to consume in a lossy manner, she can use"),s("code",[t._v("makeNotifierKit()")]),t._v(" instead, which\nstill works independently of what kind of "),s("code",[t._v("AsyncIterable")]),t._v(" subscription is a\nreference to.")]),t._v(" "),s("h2",{attrs:{id:"summary"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[t._v("#")]),t._v(" Summary")]),t._v(" "),s("p",[t._v("Data producers have to decide whether to publish losslessly or lossily. If\nyour consumers only care about more recent states, then use a "),s("code",[t._v("NotifierKit")]),t._v(".\nThis is often appropriate when the iteration represents a changing quantity.\nIf you want to support consumers that need to see all the values, then use a "),s("code",[t._v("SubscriptionKit")]),t._v(".")]),t._v(" "),s("p",[t._v("Consumers can choose different ways of processing the data. In all cases,\nthe publisher doesn't have to know the consumers, and the consumers can't\ninterfere with the producer or each other.")])])}),[],!1,null,null,null);e.default=n.exports}}]);