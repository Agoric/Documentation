(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{448:function(e,t,o){"use strict";o.r(t);var a=o(44),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"agoric-javascript-programming"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#agoric-javascript-programming"}},[e._v("#")]),e._v(" Agoric JavaScript Programming")]),e._v(" "),o("p",[e._v("Agoric's platform lets you write secure smart contracts in JavaScript. The platform\nitself is mainly written in JavaScript. However, we've made several Agoric-specific\nadditions and deletions to general JavaScript programming that you should know about\nand understand before programming on the platform. Some are "),o("em",[e._v("concepts")]),e._v(", others\nare "),o("em",[e._v("Agoric library additions")]),e._v(", and some are at the "),o("em",[e._v("syntax level")]),e._v(". All changes at the\nlanguage level are in process to become official standards.")]),e._v(" "),o("ul",[o("li",[o("p",[o("strong",[o("RouterLink",{attrs:{to:"/guides/js-programming/agoric-js-overview.html"}},[e._v("Agoric JavaScript Overview")])],1)]),e._v(" "),o("ul",[o("li",[e._v("This is the key document to familiarize yourself with and refer back to. It briefly specifies\nall the things in JavaScript you can't or shouldn't use when working on the Agoric platform and\nall the things Agoric has added at the general JavaScript programming level. In particular, you\nshould know about SES ("),o("em",[e._v("Secure ECMAScript")]),e._v(") and its "),o("code",[e._v("lockdown()")]),e._v(" and "),o("code",[e._v("harden()")]),e._v(" methods.")])])]),e._v(" "),o("li",[o("p",[o("strong",[o("RouterLink",{attrs:{to:"/guides/js-programming/ses/"}},[e._v("Secure EcmaScript (SES)")])],1)]),e._v(" "),o("ul",[o("li",[e._v("SES provides a secure platform for\nexecuting programs. With SES, you can run code you don't completely trust,\nwithout being vulnerable to bugs or bad intentions. It's a\nstandards-track extension to the JavaScript standard. Notable additions\ninclude the "),o("code",[e._v("lockdown()")]),e._v(" and "),o("code",[e._v("harden()")]),e._v(" methods to freeze objects.")])])]),e._v(" "),o("li",[o("p",[o("strong",[o("RouterLink",{attrs:{to:"/guides/js-programming/bigint.html"}},[o("code",[e._v("BigInt")])])],1)]),e._v(" "),o("ul",[o("li",[e._v("JavaScript's "),o("code",[e._v("Number")]),e._v(" primitive only represents\nnumbers up to 2"),o("sup",[e._v("53")]),e._v(" - 1. "),o("code",[e._v("BigInt")]),e._v(" is a newer built-in JavaScript\nobject that represents arbitrarily large integers. Agoric uses "),o("code",[e._v("BigInts")]),e._v(" for\n"),o("code",[e._v("amount")]),e._v(" "),o("code",[e._v("values")]),e._v(" and times.")])])]),e._v(" "),o("li",[o("p",[o("strong",[o("RouterLink",{attrs:{to:"/guides/js-programming/vats.html"}},[e._v("Vats")])],1)]),e._v(" "),o("ul",[o("li",[e._v("Objects and functions in the same JavaScript vat can\ncommunicate synchronously. Communication with objects outside the\nvat can only be done asynchronously.")])])]),e._v(" "),o("li",[o("p",[o("strong",[o("RouterLink",{attrs:{to:"/guides/js-programming/far.html"}},[o("code",[e._v("Far()")]),e._v(" and remotable objects")])],1)]),e._v(" "),o("ul",[o("li",[e._v("In Agoric smart contracts and dapps, you can call methods on objects from other\nvats or machines. Objects intended to be used from other vats are called "),o("em",[e._v("remotables")]),e._v(".\nTo mark an object as remotable, use the "),o("code",[e._v("Far()")]),e._v(" function.")])])]),e._v(" "),o("li",[o("p",[o("strong",[o("RouterLink",{attrs:{to:"/guides/js-programming/eventual-send.html"}},[e._v("Remote object communication using "),o("code",[e._v("E")])])],1)]),e._v(" "),o("ul",[o("li",[o("code",[e._v("E")]),e._v(' is a local "bridge" function that lets\nyou invoke methods on remote objects, whether in another vat, machine, or blockchain (for example).\nIt takes a local representative (a '),o("em",[e._v("proxy")]),e._v(") for a remote object as an argument and sends messages\nto it using normal message-sending syntax. The local proxy forwards all messages to the remote\nobject to deal with. Sending a message to the remote object must be done by\nusing "),o("code",[e._v("E")]),e._v(" ("),o("code",[e._v("E(remoteObj).myMethod()")]),e._v(").")])])]),e._v(" "),o("li",[o("p",[o("strong",[o("RouterLink",{attrs:{to:"/guides/js-programming/notifiers.html"}},[e._v("Notifiers and Subscriptions")])],1)]),e._v(" "),o("ul",[o("li",[e._v("The Agoric platform uses Notifiers and Subscriptions to distribute state change\nupdates. Both deliver an asynchronous stream of messages as a publish-subscribe system\nmight, without requiring explicit management of lists of subscribers. Notifiers are\nlossy conveyors of non-final values while Subscriptions are lossless value conveyors.")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);