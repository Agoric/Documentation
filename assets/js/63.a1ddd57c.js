(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{463:function(e,t,n){"use strict";n.r(t);var a=n(44),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"fees-and-metering"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fees-and-metering"}},[e._v("#")]),e._v(" Fees and Metering")]),e._v(" "),n("p",[e._v("Note: We recently started charging fees for using Zoe. The design is still\non-going and the following details may change.")]),e._v(" "),n("p",[e._v("Fees are charged in\nRUN, our stable local currency. These are the Zoe methods that charge\nfees:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("install()")])]),e._v(" "),n("li",[n("code",[e._v("startInstance()")])]),e._v(" "),n("li",[n("code",[e._v("offer()")])]),e._v(" "),n("li",[n("code",[e._v("getPublicFacet()")])])]),e._v(" "),n("p",[e._v("The specific amount charged for each method can be queried with\n"),n("code",[e._v("E(zoe).getConfiguration()")]),e._v(", which returns a promise for an object. On\nthat object, the "),n("code",[e._v("zoeFeesConfig")]),e._v(" property gives the fee values in the\nsmallest unit of RUN.\n(The unit of RUN displayed in the wallet and in dapps is\n10^"),n("code",[e._v("decimalPlaces")]),e._v(", usually 10^6).")]),e._v(" "),n("p",[e._v("An example of "),n("code",[e._v("zoeFeesConfig")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("zoeFeesConfig: {\n  getPublicFacetFee: 50n,\n  installFee: 65000n,\n  startInstanceFee: 5000000n,\n  offerFee: 65000n,\n  timeAuthority: chainTimerServiceP,\n  lowFee: 500000n,\n  highFee: 5000000n,\n  shortExp: 300000n,\n  longExp: 86400000n,\n},\n")])])]),n("p",[e._v("Note: the "),n("code",[e._v("n")]),e._v(" is appended to the end of the integer literal to make a\nbigint. Bigints are used for arbitrarily large values and therefore\nare much safer\nthan integers.")]),e._v(" "),n("h2",{attrs:{id:"paying-fees-and-fee-purses"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#paying-fees-and-fee-purses"}},[e._v("#")]),e._v(" Paying Fees and Fee Purses")]),e._v(" "),n("p",[e._v("In order to pay fees, you must create a fee purse. An empty fee purse can be\ncreated by calling "),n("code",[e._v("E(zoe).makeFeePurse()")]),e._v(". For users on the\ntestnet/devnet/local development, a fee purse has been created for you\nalready, and is in your wallet.")]),e._v(" "),n("p",[e._v('A fee purse can be charged in two ways. It can be passed directly to\na Zoe method as the last argument, or it can be "bound" to Zoe such\nthat any call made using the returned Zoe will charge the fee purse,\nwithout needing to pass it in.')]),e._v(" "),n("p",[e._v("To bind a fee purse to Zoe, call:")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" myZoe "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[e._v("E")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("zoe"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("bindDefaultFeePurse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("feePurse"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("p",[e._v("Fees must be paid in RUN, so please make sure that your fee purse has\na balance of RUN that is sufficient for paying fees.")]),e._v(" "),n("h2",{attrs:{id:"metering-and-paying-for-execution"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#metering-and-paying-for-execution"}},[e._v("#")]),e._v(" Metering and Paying for Execution")]),e._v(" "),n("p",[e._v("Fees are used to pay for the ongoing execution of contract code.\nSpecifically, the fee purse that the contract owner uses when calling\n"),n("code",[e._v("E(zoe).startInstance")]),e._v(" will be charged ongoing fees for chunks of execution.")]),e._v(" "),n("p",[e._v("Execution is measured in "),n("code",[e._v("computrons")]),e._v(" at the JavaScript engine level\n(we use "),n("a",{attrs:{href:"https://github.com/Moddable-OpenSource/moddable#modern-software-development-for-microcontrollers",target:"_blank",rel:"noopener noreferrer"}},[e._v("XS"),n("OutboundLink")],1),e._v("),\nand Zoe charges a fee per computron. Zoe uses a kernel-level\nconcept called a "),n("code",[e._v("meter")]),e._v(" to keep records of how many computrons have\nbeen paid for, and how many have been used up. When execution uses up\nthe paid-for computrons, Zoe refills the\nmeter with computrons by charging a fee to the fee purse.")]),e._v(" "),n("p",[e._v("Contract owners must add RUN to their fee purse on a regular basis to pay for the ongoing\nexecution. The next section explains how contract owners can transfer\nsome of the costs to users.")]),e._v(" "),n("h2",{attrs:{id:"charging-users-of-your-contract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#charging-users-of-your-contract"}},[e._v("#")]),e._v(" Charging Users of Your Contract")]),e._v(" "),n("p",[e._v("To recoup the costs of execution, you can use Zoe to charge your users\nfees. To do so, when making an invitation in contract code, you can\nspecify a fee in relative terms. For example, in the AMM, the SwapIn\ninvitation specifies a low fee and a short expiry:")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[e._v("  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[e._v("makeSwapInInvitation")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v("\n    zcf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("makeInvitation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n      swapIn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("'autoswap swapIn'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token constant"}},[e._v("LOW_FEE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token constant"}},[e._v("SHORT_EXP")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("p",[n("code",[e._v("LOW_FEE")]),e._v(" is a constant understood by Zoe. It will be translated by\nZoe from a relative description into an amount of RUN, such that the\ninvitation that a user receives has the additional details where "),n("code",[e._v("fee")]),e._v("\nis an amount of RUN and "),n("code",[e._v("expiry")]),e._v(" is a timestamp:")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" fee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" expiry"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" zoeTimeAuthority "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("p",[e._v("The relative fee specified by contract code can be either LOW_FEE or\nHIGH_FEE, and the expiry can be SHORT_EXP or LONG_EXP.")]),e._v(" "),n("p",[e._v("The translation from relative fees and expiries to absolute fees and\nexpiries can be altered when Zoe is created by changing "),n("code",[e._v("lowFee")]),e._v(",\n"),n("code",[e._v("highFee")]),e._v(", "),n("code",[e._v("shortExp")]),e._v(", and "),n("code",[e._v("longExp")]),e._v(" in "),n("code",[e._v("zoeFeesConfig")]),e._v(".")]),e._v(" "),n("p",[e._v("When a user makes an offer, Zoe checks whether the "),n("code",[e._v("expiry")]),e._v(" in the\ninvitation has passed and then charges the fee specified in the invitation. This fee,\nunlike the other fees, is deposited directly into the feePurse for the\ncontract owner. This makes it easier for the contract owner to\nguarantee that they can pay for the execution of their contract.")]),e._v(" "),n("h2",{attrs:{id:"troubleshooting"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting"}},[e._v("#")]),e._v(" Troubleshooting")]),e._v(" "),n("p",[e._v("If you are experiencing problems running\ndapps, please make sure your fee purse has enough RUN to pay fees.")])])}),[],!1,null,null,null);t.default=s.exports}}]);